import mongoose from 'mongoose';
import fetch from 'node-fetch';

const RequestResponseSchema = new mongoose.Schema({
    location: String,
    personality: String,
    response: String,
    timestamp: { type: Date, default: Date.now }
});

const RequestResponse = mongoose.model('RequestResponse', RequestResponseSchema);

const resolvers = {
    Query: {
        getRequestResponse: async (_, { location, personality }) => {
            // ğŸš€ Chercher dans la base de donnÃ©es MongoDB en utilisant Mongoose
            console.log("ğŸš€ Recherche dans la base de donnÃ©es...");

            const cachedResult = await RequestResponse.findOne({ location, personality });

            // Si un rÃ©sultat est trouvÃ© dans la base de donnÃ©es, retournez-le
            if (cachedResult) {
                console.log("ğŸš€ DonnÃ©es trouvÃ©es dans la base de donnÃ©es !");
                return cachedResult.response;
            }

            console.log("ğŸš€ DonnÃ©es non trouvÃ©es dans la base de donnÃ©es, interrogation de ms-gptlink...");

            // Faire une requÃªte Ã  ms-gptlink
            const prompt = `Salut Guide ! Je suis en vacances Ã  ${location}. Jâ€™aime les sorties de type : ${personality}. Que me proposes-tu ? Inclus moi un lien Google de lâ€™Ã©tablissement ou du lieux pour Ãªtre sÃ»r quâ€™il est bien ouvert. Tu peux Ã©tendre la zone Ã  quelques kilomÃ¨tres autour si il y a des trucs sympa Ã  faire !`;

            const gptResponse = await fetch('http://ms-gptlink:4000', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    query: `
                        query ExampleQuery($prompt: String!) {
                            getCompletion(prompt: $prompt)
                        }
                    `,
                    variables: { prompt }
                })
            });

            const gptData = await gptResponse.json();
            const gptResult = gptData.data.getCompletion;

            if (!gptResult) {
                console.error("ğŸš€ Erreur lors de la rÃ©cupÃ©ration des donnÃ©es de ms-gptlink");
                return "Erreur lors de la rÃ©cupÃ©ration des suggestions. Veuillez rÃ©essayer plus tard.";
            }

            // Enregistrez le message et la rÃ©ponse dans MongoDB
            const requestResponseEntry = new RequestResponse({
                location: location,
                personality: personality,
                response: gptResult
            });

            try {
                console.log("ğŸš€ Enregistrement des donnÃ©es dans la base de donnÃ©es...");
                await requestResponseEntry.save();
                console.log("ğŸš€ DonnÃ©es enregistrÃ©es avec succÃ¨s !");
            } catch (error) {
                console.error("ğŸš€ Erreur lors de la sauvegarde:", error);
            }

            return gptResult;
        },
    },
};

export default resolvers;
